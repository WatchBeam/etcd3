// AUTOGENERATED CODE, DO NOT EDIT
// tslint:disable

import * as grpc from 'grpc';

export interface ICallable {
  exec(service: keyof typeof Services, method: string, params: object): Promise<any>;
  getConnection(service: keyof typeof Services): Promise<{ client: grpc.Client, metadata: grpc.Metadata }>;
}

export interface IResponseStream<T> {
  on(event: 'data', fn: (item: T) => void): this;
  on(event: 'end', fn: () => void): this;
  on(event: 'status', fn: (status: grpc.StatusMessage) => void): this;
  on(event: 'error', fn: (err: Error) => void): this;
}

export interface IRequestStream<T> {
  write(item: T): void;
  end(): void;
}

export interface IDuplexStream<T, R> extends IRequestStream<T>, IResponseStream<R> {}
